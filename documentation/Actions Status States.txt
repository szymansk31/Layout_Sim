
How are trains initialized and started?
1. Train is part of "startingTrains.txt" input deck.  The train may be in
   a yard or staging area, or may start on a route with status "enroute".
2. For case 1, the train has a "startTime" parameter from the input deck.
3. Train is created in a yard from cars on yard tracks.  Destination is selected 
    by which track has the most cars.
4. For case 3, the train is created in the yard with a status of "built".  Start time
    is taken from a start time list given in the input deck.  
5. Further for case 3, the train status changes from "built" to "wait4Clearance" by
    yardCalcs.py.  TrainProc takes over status processing, turning "wait4Clearance" 
    into "enroute".



Train states.  For example, a state/status of dropPickup results in the train
entering into ydTrains under "swTrain" - an action that the yard takes to switch
the train.

Alternatively, a "switch" or "turn" status results in an action by the road crew:
"rdCrwSw" in ydTrains
    trnStatusList = ["enroute", "wait4Clearance", "building", "built", "terminate", "switch"
                     "dropPickup", "continue", "turn", "misc", "stop"]

In trainProc:
        match trainDict["status"]:
            case "enroute":

            case "wait4Clearance":
                trainDict["status"] = "enroute"
                disp.drawTrain(trnName)
                pass
            case "building":
                #procssing done in locProc
                pass
        # the following are status states for a train
        # they are also actions that a train can undergo in a 
        # location/terminal/destination
            case "terminate" | "continue":
                #procssing done in locProc
                pass
            case "switch" | "turn" | "dropPickup":
                #procssing done in locProc
                pass
            case "stop":
                pass

trainDB.ydTrains = {"brkDnTrn": [], "swTrain": [], "buildTrain": [], "rdCrwSw": []}

In locProc, analyzeTrains sets up the routines in yardCalcs file after 
categorizing how the train needs to be handled.
            match trainDB.trains[trainNam]["status"]:
                case "terminate":
                    if trainNam not in trainDB.ydTrains["brkDnTrn"]:
                        trainDB.ydTrains["brkDnTrn"].append(trainNam)
                case "dropPickup":
                    # in a yard this action is often undertaken by 
                    # the yard crew; hence a yard action
                    if trainNam not in trainDB.ydTrains["swTrain"]:
                        trainDB.ydTrains["swTrain"].append(trainNam)
                case "building":
                    # for yards, not switch areas
                    if trainNam not in trainDB.ydTrains["buildTrain"]:
                        trainDB.ydTrains["buildTrain"].append(trainNam)
                case "switch" | "turn":
                    # for switch areas no yards
                    # code is in locProc but actions are undertaken by
                    # the virtual train crew
                    if trainNam not in trainDB.ydTrains["rdCrwSw"]:
                        trainDB.ydTrains["rdCrwSw"].append(trainNam)
                    pass


self.actionList = ["brkDnTrn", "swTrain", "buildTrain", "servIndus", "misc"]

Finally, yardCalcs chooses an action to take from this list:
        match choice:
            case "brkDnTrn":
                self.brkDownTrain(loc)
            case "swTrain":
                if trainDB.ydTrains["swTrain"]:
                    self.swTrain(loc)
                    pass
            case "buildTrain":
                self.buildTrain(loc)
                pass
            case "servIndus":
                pass
            case "misc":
                locs.locDat[loc]["startMisc"] = mVars.time
                endMisc = locs.locDat[loc]["startMisc"] + mVars.prms["miscWaitTime"]
                pass
